from flask import Flask, request, redirect, url_for, render_template
import production_utils as pu
import server_utils as s
import spotify_utils as su

app = Flask(__name__)

CLIENT_ID = '8de267b03c464274a3546bfe84496696'
PLAYLIST_LIMIT = 20
post_auth = 'main'

pu.load_prod_classifiers()

@app.route('/')
def main():
  return render_template(
    'index.html',
    playlist_url=url_for('generate_playlist'),
    rate_url=url_for('profile'),
  )

@app.route('/generate-playlist')
def generate_playlist():
  bardo_id = request.args.get('bardo-id')
  if bardo_id:
    needs_rating = s.load_tracks_to_rate(bardo_id)
    if len(needs_rating) == 0:
      token = request.args.get('token')
      if token:
        s.make_playlist(token, PLAYLIST_LIMIT)
        return render_template('generate-playlist.html')
      else:
        global post_auth
        post_auth = 'generate_playlist'
        return redirect(f'https://accounts.spotify.com/authorize?client_id={CLIENT_ID}&response_type=code&redirect_uri={url_for("spotify_auth", _external=True)}&scope=playlist-modify-public playlist-modify-private&show_dialog=true')
    else:
      return redirect(
        f'{url_for("rate_recommendations")}?bardo-id={bardo_id}&redirect-uri=generate_playlist'
      )
  else:
    generate_url = url_for("generate_playlist").replace('/', '')
    return redirect(
      f'{url_for("identify")}?redirect-url={generate_url}'
    )

@app.route('/profile')
def profile():
  bardo_id = request.args.get('bardo-id')
  if bardo_id:
    needs_rating = s.load_tracks_to_rate(bardo_id)
    if len(needs_rating) == 0:
      token = request.args.get('token')
      if token:
        save_url = f'{url_for("save_playlists")}?bardo-id={bardo_id}'
        return render_template('profile.html', save_url=save_url, token=token)
      else:
        global post_auth
        post_auth = 'profile'
        return redirect(f'https://accounts.spotify.com/authorize?client_id={CLIENT_ID}&response_type=code&redirect_uri={url_for("spotify_auth", _external=True)}&scope=playlist-modify-public playlist-modify-private')
    else:
      return redirect(
        f'{url_for("rate_recommendations")}?bardo-id={bardo_id}&redirect-uri=profile'
      )
  else:
    profile = url_for("profile").replace('/', '')
    return redirect(
      f'{url_for("identify")}?redirect-url={profile_url}'
    )

@app.route('/save-playlists', methods=['POST'])
def save_playlists():
  bardo_id = request.args.get('bardo-id')
  token = request.form.get('token')
  favorite_url = request.form.get('favorite')
  not_favorite_url = request.form.get('no-favorite')

  if bardo_id and token and (favorite_url or not_favorite_url):
    feedback = s.process_plst_feedback(
      token,
      favorite_url,
      not_favorite_url,
    )
    if len(feedback) > 0:
      s.save_feedback(bardo_id, feedback, 'profile')
      return 'Tracks saved.'
    else:
      return 'No tracks saved.'
  else:
    return 'Invalid request.'

@app.route('/identify')
def identify():
  redirect_url = request.args.get('redirect-url')
  if not redirect_url:
    redirect_url = url_for('main')
  return render_template(
    'identify.html',
    redirect_url=redirect_url,
  )

@app.route('/rate-recommendations')
def rate_recommendations():
  redirect_uri = request.args.get('redirect-uri')
  if not redirect_uri:
    redirect_uri = 'main'

  bardo_id = request.args.get('bardo-id')
  if bardo_id:
    needs_rating = s.load_tracks_to_rate(bardo_id)
    save_url = url_for('save_ratings')
    return render_template(
      'rate-recommendations.html',
      needs_rating=needs_rating,
      save_url=f'{save_url}?bardo-id={bardo_id}&redirect-uri={redirect_uri}',
    )
  else:
    rate_url = url_for("rate_recommendations").replace('/', '')
    return redirect(
      f'{url_for("identify")}?redirect-url={rate_url}'
    )

@app.route('/save-ratings', methods=['POST'])
def save_ratings():
  bardo_id = request.args.get('bardo-id')
  if bardo_id:
    needs_rating = s.load_tracks_to_rate(bardo_id)
    likes = []
    no_likes = []
    for track in needs_rating:
      feedback = request.form.get(f'feedback-{track}')
      if  == 'like':
        likes.append(

    s.save_feedback(bardo_id, s.process_feedback_input(
      default_id,
      default_name,
      like,
      no_like,
    ), 'feedback')
    if redirect_uri:
      return redirect(f'{url_for(redirect_uri)}?bardo-id={bardo_id}')
    else:
      return 'Tracks saved.'
  else:
    return 'Invalid request.'

@app.route('/spotify-auth')
def spotify_auth():
  code = request.args.get('code')
  if code:
    token = su.request_token(
      'authorization_code',
      code,
      url_for("spotify_auth", _external=True),
    )
    return render_template(
      'spotify-auth.html',
      token=token,
      redirect_url=url_for(post_auth),
    )
  else:
    return 'Invalid request'
